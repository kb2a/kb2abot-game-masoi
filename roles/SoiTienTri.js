const Role = require('./Role');
const gameConfig = require('../gameConfig');

module.exports = class SoiTienTri extends Role {
	constructor(options) {
		super({
			...{
				type: 'SoiTienTri'
			},
			...options
		});
	}

	commitChecker(code, value) {
		if (code == gameConfig.code.VOTEKILL)
			return super.commitChecker(code, value);

		switch (code) {
		case gameConfig.code.SOITIENTRI_RESIGN:
			this.testCommit(value, ['1', '2']);
			if (value == 1)
				this.sendMessage('B·∫°n s·∫Ω bi·∫øn v·ªÅ S√≥i Th∆∞·ªùng sau ƒë√™m nay');
			break;
		case gameConfig.code.SOITIENTRI_SEER: {
			this.testCommit(value, this.isNotSelf);
			const {name, username} = this.game.playerManager.items[value - 1];
			this.sendMessage(`B·∫°n ƒë√£ ch·ªçn xem role c·ªßa ${name}(${username})!`);
			break;
		}
		case gameConfig.code.SOITIENTRI_VOTE: {
			this.testCommit(value, this.isAlive, this.isNotSelf);
			const {name, username} = this.game.playerManager.items[value - 1];
			this.sendMessage(`B·∫°n ƒë√£ ch·ªçn c·∫Øn ${name}(${username})!`);
			break;
		}
		}
	}

	async onNightEnd(code, value) {
		if (!value) return;
		await super.onNightEnd(code, value);

		switch (code) {
		case gameConfig.code.SOITIENTRI_RESIGN:
			if (value == 1) this.type = 'SoiThuong';
			break;
		case gameConfig.code.SOITIENTRI_SEER: {
			const {name, username, type} = this.game.playerManager.items[value - 1];
			const party = gameConfig.data[type].party > 0 ? 'D√¢n L√†ng' : 'S√≥i';
			await this.sendMessage(`Phe c·ªßa ${name}(${username}) l√† /${party}/`);
			break;
		}
		}
	}

	async onNight() {
		const requests = [];

		let alone = true;
		for (const player of this.game.playerManager.items) {
			if (gameConfig.data[player.type].party == -1 && player != this) {
				alone = false;
				break;
			}
		}
		if (alone) {
			this.type = 'SoiThuong';
			await this.sendMessage(
				'V√¨ trong phe c·ªßa b·∫°n kh√¥ng c√≤n ai n√™n b·∫°n ƒë√£ tr·ªü th√†nh S√≥i Th∆∞·ªùng!'
			);
		}

		if (this.type == 'SoiTienTri') {
			await this.timingSend({
				message:
					'ƒê√™m nay b·∫°n c√≥ mu·ªën tr·ªü v·ªÅ S√≥i Th∆∞·ªùng kh√¥ng? (S√≥i Ti√™n Tri kh√¥ng th·ªÉ vote gi·∫øt)\n' +
					`${gameConfig.symbols[1]} C√≥ ‚ô•\n` +
					`${gameConfig.symbols[2]} Kh√¥ng üòà`,
				timing: gameConfig.timeout.SOITIENTRI_RESIGN
			});
			const data = await this.request(
				gameConfig.code.SOITIENTRI_RESIGN,
				gameConfig.timeout.SOITIENTRI_RESIGN
			);
			requests.push(data);
			if (data.value == '2') {
				await this.timingSend({
					message: 'ƒê√™m nay b·∫°n mu·ªën soi ai? \n' + this.game.chat_playerList(),
					timing: gameConfig.timeout.SOITIENTRI_SEER
				});
				requests.push(
					await this.request(
						gameConfig.code.SOITIENTRI_SEER,
						gameConfig.timeout.SOITIENTRI_SEER
					)
				);
			}
		} else {
			// SoiThuong
			await this.timingSend({
				message: 'ƒê√™m nay b·∫°n mu·ªën c·∫Øn ai? \n' + this.game.chat_playerList(),
				timing: gameConfig.timeout.SOITIENTRI_VOTE
			});
			requests.push(
				await this.request(
					gameConfig.code.SOITIENTRI_VOTE,
					gameConfig.timeout.SOITIENTRI_VOTE
				)
			);
		}

		return requests;
	}
};
